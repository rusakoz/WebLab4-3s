import javax.xml.parsers.DocumentBuilderFactory

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.4'
	id "com.github.node-gradle.node" version "7.0.1"
}

group = 'org.lab4.wed'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

// yarn build
task buildFront(type: YarnTask) {
  args = ['build']
}

// выполняем очистку кешей и скомпилированных файлов перед компиляцией
// compileJava.dependsOn(clean)

yarn_install.dependsOn(yarn_cache_clean) // очистка кэша перед yarn install
buildFront.dependsOn(yarn_install) // запуск yarn_install перед buildFront
processResources.dependsOn(buildFront) // запуск buildFront на этапе жизненного цикла gradle processResources(самом начальном, чтобы он смог попасть в конечный jar)

repositories {
	mavenCentral()
}

// доустановка node.js в сборку
node {
	download=true
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'
	compileOnly 'org.projectlombok:lombok'
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.seleniumhq.selenium:selenium-java:4.23.0'
}

test {
	useJUnitPlatform()
}

//compile
task compileProject(type: JavaCompile) {
    dependsOn 'classes'
}

//build
task buildProject(type: Jar) {
    dependsOn 'compileProject'
    archiveFileName = 'WebLab4Application.jar'
    from sourceSets.main.output
    manifest {
        attributes(
                'Main-Class': 'org.lab4.web.webLab4.WebLab4Application'
        )
    }
}

//clean
task cleanProject(type: Delete) {
    delete 'build'
}

//xml - валидация всех xml-файлов в проекте
task xmlProject() {
    doLast {
        def xmlFiles = fileTree(dir: '/', include: '**/*.xml')
		println 'xmlFiles'
        xmlFiles.each { file ->
            try {
                def factory = DocumentBuilderFactory.newInstance()
                def builder = factory.newDocumentBuilder()
                builder.parse(file)
                println "XML-file '${file}' valied"
            } catch (Exception e) {
                println "XML-file '${file}' unvalied: ${e.message}"
            }
        }
    }
}